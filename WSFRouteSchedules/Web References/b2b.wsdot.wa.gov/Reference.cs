// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace WSFRouteSchedules.b2b.wsdot.wa.gov {
    
    
    /// <remarks/>
    /// <remarks>
///The Washington State Ferries schedule web service provides sailing times pertaining to terminal combinations or routes for a particular date.
///</remarks>
    [System.Web.Services.WebServiceBinding(Name="WSF_x0020_ScheduleSoap", Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WSFSchedule : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private APIAccessHeader APIAccessHeaderValueField;
        
        private System.Threading.SendOrPostCallback GetActiveScheduledSeasonsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAlertsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRouteDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRoutesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRoutesHavingServiceDisruptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSchedRoutesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTerminalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTerminalsAndMatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTimeAdjOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCacheFlushDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRouteDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRouteDetailsByTerminalComboOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoutesByTerminalComboOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchedRoutesByScheduledSeasonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchedSailingsBySchedRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScheduleByRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScheduleByTerminalComboOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTerminalMatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeAdjByRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeAdjBySchedRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTodaysScheduleByRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTodaysScheduleByTerminalComboOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetValidDateRangeOperationCompleted;
        
        public WSFSchedule() {
            this.Url = "http://b2b.wsdot.wa.gov/ferries/schedule/default.asmx";
        }
        
        public WSFSchedule(string url) {
            this.Url = url;
        }
        
        public APIAccessHeader APIAccessHeaderValue {
            get {
                return this.APIAccessHeaderValueField;
            }
            set {
                this.APIAccessHeaderValueField = value;
            }
        }
        
        public event GetActiveScheduledSeasonsCompletedEventHandler GetActiveScheduledSeasonsCompleted;
        
        public event GetAllAlertsCompletedEventHandler GetAllAlertsCompleted;
        
        public event GetAllRouteDetailsCompletedEventHandler GetAllRouteDetailsCompleted;
        
        public event GetAllRoutesCompletedEventHandler GetAllRoutesCompleted;
        
        public event GetAllRoutesHavingServiceDisruptionsCompletedEventHandler GetAllRoutesHavingServiceDisruptionsCompleted;
        
        public event GetAllSchedRoutesCompletedEventHandler GetAllSchedRoutesCompleted;
        
        public event GetAllTerminalsCompletedEventHandler GetAllTerminalsCompleted;
        
        public event GetAllTerminalsAndMatesCompletedEventHandler GetAllTerminalsAndMatesCompleted;
        
        public event GetAllTimeAdjCompletedEventHandler GetAllTimeAdjCompleted;
        
        public event GetCacheFlushDateCompletedEventHandler GetCacheFlushDateCompleted;
        
        public event GetRouteDetailCompletedEventHandler GetRouteDetailCompleted;
        
        public event GetRouteDetailsByTerminalComboCompletedEventHandler GetRouteDetailsByTerminalComboCompleted;
        
        public event GetRoutesByTerminalComboCompletedEventHandler GetRoutesByTerminalComboCompleted;
        
        public event GetSchedRoutesByScheduledSeasonCompletedEventHandler GetSchedRoutesByScheduledSeasonCompleted;
        
        public event GetSchedSailingsBySchedRouteCompletedEventHandler GetSchedSailingsBySchedRouteCompleted;
        
        public event GetScheduleByRouteCompletedEventHandler GetScheduleByRouteCompleted;
        
        public event GetScheduleByTerminalComboCompletedEventHandler GetScheduleByTerminalComboCompleted;
        
        public event GetTerminalMatesCompletedEventHandler GetTerminalMatesCompleted;
        
        public event GetTimeAdjByRouteCompletedEventHandler GetTimeAdjByRouteCompleted;
        
        public event GetTimeAdjBySchedRouteCompletedEventHandler GetTimeAdjBySchedRouteCompleted;
        
        public event GetTodaysScheduleByRouteCompletedEventHandler GetTodaysScheduleByRouteCompleted;
        
        public event GetTodaysScheduleByTerminalComboCompletedEventHandler GetTodaysScheduleByTerminalComboCompleted;
        
        public event GetValidDateRangeCompletedEventHandler GetValidDateRangeCompleted;
        
        /// <remarks>
///Provides a brief summary of all scheduled sailing seasons that are currently active / available.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetActiveScheduledSeasons", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedBriefResponse[] GetActiveScheduledSeasons() {
            object[] results = this.Invoke("GetActiveScheduledSeasons", new object[0]);
            return ((SchedBriefResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetActiveScheduledSeasons(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActiveScheduledSeasons", new object[0], callback, asyncState);
        }
        
        public SchedBriefResponse[] EndGetActiveScheduledSeasons(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedBriefResponse[])(results[0]));
        }
        
        public void GetActiveScheduledSeasonsAsync() {
            this.GetActiveScheduledSeasonsAsync(null);
        }
        
        public void GetActiveScheduledSeasonsAsync(object userState) {
            if ((this.GetActiveScheduledSeasonsOperationCompleted == null)) {
                this.GetActiveScheduledSeasonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveScheduledSeasonsCompleted);
            }
            this.InvokeAsync("GetActiveScheduledSeasons", new object[0], this.GetActiveScheduledSeasonsOperationCompleted, userState);
        }
        
        private void OnGetActiveScheduledSeasonsCompleted(object arg) {
            if ((this.GetActiveScheduledSeasonsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveScheduledSeasonsCompleted(this, new GetActiveScheduledSeasonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves all published alerts.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetAllAlerts", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public AlertResponse[] GetAllAlerts() {
            object[] results = this.Invoke("GetAllAlerts", new object[0]);
            return ((AlertResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetAllAlerts(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllAlerts", new object[0], callback, asyncState);
        }
        
        public AlertResponse[] EndGetAllAlerts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AlertResponse[])(results[0]));
        }
        
        public void GetAllAlertsAsync() {
            this.GetAllAlertsAsync(null);
        }
        
        public void GetAllAlertsAsync(object userState) {
            if ((this.GetAllAlertsOperationCompleted == null)) {
                this.GetAllAlertsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAlertsCompleted);
            }
            this.InvokeAsync("GetAllAlerts", new object[0], this.GetAllAlertsOperationCompleted, userState);
        }
        
        private void OnGetAllAlertsCompleted(object arg) {
            if ((this.GetAllAlertsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAlertsCompleted(this, new GetAllAlertsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Provides detailed information for all available routes pertaining to a particular date.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetAllRouteDetails", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public RouteResponse[] GetAllRouteDetails(TripDateMsg request) {
            object[] results = this.Invoke("GetAllRouteDetails", new object[] {
                        request});
            return ((RouteResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetAllRouteDetails(TripDateMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllRouteDetails", new object[] {
                        request}, callback, asyncState);
        }
        
        public RouteResponse[] EndGetAllRouteDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RouteResponse[])(results[0]));
        }
        
        public void GetAllRouteDetailsAsync(TripDateMsg request) {
            this.GetAllRouteDetailsAsync(request, null);
        }
        
        public void GetAllRouteDetailsAsync(TripDateMsg request, object userState) {
            if ((this.GetAllRouteDetailsOperationCompleted == null)) {
                this.GetAllRouteDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRouteDetailsCompleted);
            }
            this.InvokeAsync("GetAllRouteDetails", new object[] {
                        request}, this.GetAllRouteDetailsOperationCompleted, userState);
        }
        
        private void OnGetAllRouteDetailsCompleted(object arg) {
            if ((this.GetAllRouteDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRouteDetailsCompleted(this, new GetAllRouteDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Provides all available routes for a particular date.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetAllRoutes", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public RouteBriefResponse[] GetAllRoutes(TripDateMsg request) {
            object[] results = this.Invoke("GetAllRoutes", new object[] {
                        request});
            return ((RouteBriefResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetAllRoutes(TripDateMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllRoutes", new object[] {
                        request}, callback, asyncState);
        }
        
        public RouteBriefResponse[] EndGetAllRoutes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RouteBriefResponse[])(results[0]));
        }
        
        public void GetAllRoutesAsync(TripDateMsg request) {
            this.GetAllRoutesAsync(request, null);
        }
        
        public void GetAllRoutesAsync(TripDateMsg request, object userState) {
            if ((this.GetAllRoutesOperationCompleted == null)) {
                this.GetAllRoutesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRoutesCompleted);
            }
            this.InvokeAsync("GetAllRoutes", new object[] {
                        request}, this.GetAllRoutesOperationCompleted, userState);
        }
        
        private void OnGetAllRoutesCompleted(object arg) {
            if ((this.GetAllRoutesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRoutesCompleted(this, new GetAllRoutesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Provides all available routes for a particular date where one or more service disruptions are present.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetAllRoutesHavingServiceDisruptions", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public RouteBriefResponse[] GetAllRoutesHavingServiceDisruptions(TripDateMsg request) {
            object[] results = this.Invoke("GetAllRoutesHavingServiceDisruptions", new object[] {
                        request});
            return ((RouteBriefResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetAllRoutesHavingServiceDisruptions(TripDateMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllRoutesHavingServiceDisruptions", new object[] {
                        request}, callback, asyncState);
        }
        
        public RouteBriefResponse[] EndGetAllRoutesHavingServiceDisruptions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RouteBriefResponse[])(results[0]));
        }
        
        public void GetAllRoutesHavingServiceDisruptionsAsync(TripDateMsg request) {
            this.GetAllRoutesHavingServiceDisruptionsAsync(request, null);
        }
        
        public void GetAllRoutesHavingServiceDisruptionsAsync(TripDateMsg request, object userState) {
            if ((this.GetAllRoutesHavingServiceDisruptionsOperationCompleted == null)) {
                this.GetAllRoutesHavingServiceDisruptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRoutesHavingServiceDisruptionsCompleted);
            }
            this.InvokeAsync("GetAllRoutesHavingServiceDisruptions", new object[] {
                        request}, this.GetAllRoutesHavingServiceDisruptionsOperationCompleted, userState);
        }
        
        private void OnGetAllRoutesHavingServiceDisruptionsCompleted(object arg) {
            if ((this.GetAllRoutesHavingServiceDisruptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRoutesHavingServiceDisruptionsCompleted(this, new GetAllRoutesHavingServiceDisruptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves the scheduled route(s) for all seasons that are currently active / available.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetAllSchedRoutes", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedRouteBriefResponse[] GetAllSchedRoutes() {
            object[] results = this.Invoke("GetAllSchedRoutes", new object[0]);
            return ((SchedRouteBriefResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetAllSchedRoutes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllSchedRoutes", new object[0], callback, asyncState);
        }
        
        public SchedRouteBriefResponse[] EndGetAllSchedRoutes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedRouteBriefResponse[])(results[0]));
        }
        
        public void GetAllSchedRoutesAsync() {
            this.GetAllSchedRoutesAsync(null);
        }
        
        public void GetAllSchedRoutesAsync(object userState) {
            if ((this.GetAllSchedRoutesOperationCompleted == null)) {
                this.GetAllSchedRoutesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSchedRoutesCompleted);
            }
            this.InvokeAsync("GetAllSchedRoutes", new object[0], this.GetAllSchedRoutesOperationCompleted, userState);
        }
        
        private void OnGetAllSchedRoutesCompleted(object arg) {
            if ((this.GetAllSchedRoutesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSchedRoutesCompleted(this, new GetAllSchedRoutesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Provides all available terminals for a particular date.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetAllTerminals", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public TerminalResponse[] GetAllTerminals(TripDateMsg request) {
            object[] results = this.Invoke("GetAllTerminals", new object[] {
                        request});
            return ((TerminalResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetAllTerminals(TripDateMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllTerminals", new object[] {
                        request}, callback, asyncState);
        }
        
        public TerminalResponse[] EndGetAllTerminals(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TerminalResponse[])(results[0]));
        }
        
        public void GetAllTerminalsAsync(TripDateMsg request) {
            this.GetAllTerminalsAsync(request, null);
        }
        
        public void GetAllTerminalsAsync(TripDateMsg request, object userState) {
            if ((this.GetAllTerminalsOperationCompleted == null)) {
                this.GetAllTerminalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTerminalsCompleted);
            }
            this.InvokeAsync("GetAllTerminals", new object[] {
                        request}, this.GetAllTerminalsOperationCompleted, userState);
        }
        
        private void OnGetAllTerminalsCompleted(object arg) {
            if ((this.GetAllTerminalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTerminalsCompleted(this, new GetAllTerminalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///For a given date, retrieves all available terminal combinations.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetAllTerminalsAndMates", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public TerminalComboResponse[] GetAllTerminalsAndMates(TripDateMsg request) {
            object[] results = this.Invoke("GetAllTerminalsAndMates", new object[] {
                        request});
            return ((TerminalComboResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetAllTerminalsAndMates(TripDateMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllTerminalsAndMates", new object[] {
                        request}, callback, asyncState);
        }
        
        public TerminalComboResponse[] EndGetAllTerminalsAndMates(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TerminalComboResponse[])(results[0]));
        }
        
        public void GetAllTerminalsAndMatesAsync(TripDateMsg request) {
            this.GetAllTerminalsAndMatesAsync(request, null);
        }
        
        public void GetAllTerminalsAndMatesAsync(TripDateMsg request, object userState) {
            if ((this.GetAllTerminalsAndMatesOperationCompleted == null)) {
                this.GetAllTerminalsAndMatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTerminalsAndMatesCompleted);
            }
            this.InvokeAsync("GetAllTerminalsAndMates", new object[] {
                        request}, this.GetAllTerminalsAndMatesOperationCompleted, userState);
        }
        
        private void OnGetAllTerminalsAndMatesCompleted(object arg) {
            if ((this.GetAllTerminalsAndMatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTerminalsAndMatesCompleted(this, new GetAllTerminalsAndMatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Provides a list of all individual time adjustments (additions or cancellations) that are currently active / available.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetAllTimeAdj", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedTimeAdjResponse[] GetAllTimeAdj() {
            object[] results = this.Invoke("GetAllTimeAdj", new object[0]);
            return ((SchedTimeAdjResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetAllTimeAdj(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllTimeAdj", new object[0], callback, asyncState);
        }
        
        public SchedTimeAdjResponse[] EndGetAllTimeAdj(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedTimeAdjResponse[])(results[0]));
        }
        
        public void GetAllTimeAdjAsync() {
            this.GetAllTimeAdjAsync(null);
        }
        
        public void GetAllTimeAdjAsync(object userState) {
            if ((this.GetAllTimeAdjOperationCompleted == null)) {
                this.GetAllTimeAdjOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTimeAdjCompleted);
            }
            this.InvokeAsync("GetAllTimeAdj", new object[0], this.GetAllTimeAdjOperationCompleted, userState);
        }
        
        private void OnGetAllTimeAdjCompleted(object arg) {
            if ((this.GetAllTimeAdjCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTimeAdjCompleted(this, new GetAllTimeAdjCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Most web methods in this service are cached.  If you are also using caching in your user interface, it may be helpful to know the date and time that the cache was last flushed in this web service.
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetCacheFlushDate", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> GetCacheFlushDate() {
            object[] results = this.Invoke("GetCacheFlushDate", new object[0]);
            return ((System.Nullable<System.DateTime>)(results[0]));
        }
        
        public System.IAsyncResult BeginGetCacheFlushDate(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCacheFlushDate", new object[0], callback, asyncState);
        }
        
        public System.Nullable<System.DateTime> EndGetCacheFlushDate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Nullable<System.DateTime>)(results[0]));
        }
        
        public void GetCacheFlushDateAsync() {
            this.GetCacheFlushDateAsync(null);
        }
        
        public void GetCacheFlushDateAsync(object userState) {
            if ((this.GetCacheFlushDateOperationCompleted == null)) {
                this.GetCacheFlushDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCacheFlushDateCompleted);
            }
            this.InvokeAsync("GetCacheFlushDate", new object[0], this.GetCacheFlushDateOperationCompleted, userState);
        }
        
        private void OnGetCacheFlushDateCompleted(object arg) {
            if ((this.GetCacheFlushDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCacheFlushDateCompleted(this, new GetCacheFlushDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves detailed information pertaining to a scheduled route.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetRouteDetail", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public RouteResponse GetRouteDetail(RouteMsg request) {
            object[] results = this.Invoke("GetRouteDetail", new object[] {
                        request});
            return ((RouteResponse)(results[0]));
        }
        
        public System.IAsyncResult BeginGetRouteDetail(RouteMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRouteDetail", new object[] {
                        request}, callback, asyncState);
        }
        
        public RouteResponse EndGetRouteDetail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RouteResponse)(results[0]));
        }
        
        public void GetRouteDetailAsync(RouteMsg request) {
            this.GetRouteDetailAsync(request, null);
        }
        
        public void GetRouteDetailAsync(RouteMsg request, object userState) {
            if ((this.GetRouteDetailOperationCompleted == null)) {
                this.GetRouteDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRouteDetailCompleted);
            }
            this.InvokeAsync("GetRouteDetail", new object[] {
                        request}, this.GetRouteDetailOperationCompleted, userState);
        }
        
        private void OnGetRouteDetailCompleted(object arg) {
            if ((this.GetRouteDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRouteDetailCompleted(this, new GetRouteDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves detailed information for scheduled routes that are associated with a particular terminal combination.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetRouteDetailsByTerminalCombo", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public RouteResponse[] GetRouteDetailsByTerminalCombo(TerminalComboMsg request) {
            object[] results = this.Invoke("GetRouteDetailsByTerminalCombo", new object[] {
                        request});
            return ((RouteResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetRouteDetailsByTerminalCombo(TerminalComboMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRouteDetailsByTerminalCombo", new object[] {
                        request}, callback, asyncState);
        }
        
        public RouteResponse[] EndGetRouteDetailsByTerminalCombo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RouteResponse[])(results[0]));
        }
        
        public void GetRouteDetailsByTerminalComboAsync(TerminalComboMsg request) {
            this.GetRouteDetailsByTerminalComboAsync(request, null);
        }
        
        public void GetRouteDetailsByTerminalComboAsync(TerminalComboMsg request, object userState) {
            if ((this.GetRouteDetailsByTerminalComboOperationCompleted == null)) {
                this.GetRouteDetailsByTerminalComboOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRouteDetailsByTerminalComboCompleted);
            }
            this.InvokeAsync("GetRouteDetailsByTerminalCombo", new object[] {
                        request}, this.GetRouteDetailsByTerminalComboOperationCompleted, userState);
        }
        
        private void OnGetRouteDetailsByTerminalComboCompleted(object arg) {
            if ((this.GetRouteDetailsByTerminalComboCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRouteDetailsByTerminalComboCompleted(this, new GetRouteDetailsByTerminalComboCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves route(s) for a particular date and terminal combination.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetRoutesByTerminalCombo", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public RouteBriefResponse[] GetRoutesByTerminalCombo(TerminalComboMsg request) {
            object[] results = this.Invoke("GetRoutesByTerminalCombo", new object[] {
                        request});
            return ((RouteBriefResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetRoutesByTerminalCombo(TerminalComboMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRoutesByTerminalCombo", new object[] {
                        request}, callback, asyncState);
        }
        
        public RouteBriefResponse[] EndGetRoutesByTerminalCombo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RouteBriefResponse[])(results[0]));
        }
        
        public void GetRoutesByTerminalComboAsync(TerminalComboMsg request) {
            this.GetRoutesByTerminalComboAsync(request, null);
        }
        
        public void GetRoutesByTerminalComboAsync(TerminalComboMsg request, object userState) {
            if ((this.GetRoutesByTerminalComboOperationCompleted == null)) {
                this.GetRoutesByTerminalComboOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoutesByTerminalComboCompleted);
            }
            this.InvokeAsync("GetRoutesByTerminalCombo", new object[] {
                        request}, this.GetRoutesByTerminalComboOperationCompleted, userState);
        }
        
        private void OnGetRoutesByTerminalComboCompleted(object arg) {
            if ((this.GetRoutesByTerminalComboCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoutesByTerminalComboCompleted(this, new GetRoutesByTerminalComboCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves scheduled route(s) for a particular active season.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetSchedRoutesByScheduledSeason", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedRouteBriefResponse[] GetSchedRoutesByScheduledSeason(SchedMsg request) {
            object[] results = this.Invoke("GetSchedRoutesByScheduledSeason", new object[] {
                        request});
            return ((SchedRouteBriefResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetSchedRoutesByScheduledSeason(SchedMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSchedRoutesByScheduledSeason", new object[] {
                        request}, callback, asyncState);
        }
        
        public SchedRouteBriefResponse[] EndGetSchedRoutesByScheduledSeason(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedRouteBriefResponse[])(results[0]));
        }
        
        public void GetSchedRoutesByScheduledSeasonAsync(SchedMsg request) {
            this.GetSchedRoutesByScheduledSeasonAsync(request, null);
        }
        
        public void GetSchedRoutesByScheduledSeasonAsync(SchedMsg request, object userState) {
            if ((this.GetSchedRoutesByScheduledSeasonOperationCompleted == null)) {
                this.GetSchedRoutesByScheduledSeasonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchedRoutesByScheduledSeasonCompleted);
            }
            this.InvokeAsync("GetSchedRoutesByScheduledSeason", new object[] {
                        request}, this.GetSchedRoutesByScheduledSeasonOperationCompleted, userState);
        }
        
        private void OnGetSchedRoutesByScheduledSeasonCompleted(object arg) {
            if ((this.GetSchedRoutesByScheduledSeasonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchedRoutesByScheduledSeasonCompleted(this, new GetSchedRoutesByScheduledSeasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves sailings and departure/arrival times that correspond with a particular scheduled route.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetSchedSailingsBySchedRoute", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedSailingResponse[] GetSchedSailingsBySchedRoute(SchedRouteMsg request) {
            object[] results = this.Invoke("GetSchedSailingsBySchedRoute", new object[] {
                        request});
            return ((SchedSailingResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetSchedSailingsBySchedRoute(SchedRouteMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSchedSailingsBySchedRoute", new object[] {
                        request}, callback, asyncState);
        }
        
        public SchedSailingResponse[] EndGetSchedSailingsBySchedRoute(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedSailingResponse[])(results[0]));
        }
        
        public void GetSchedSailingsBySchedRouteAsync(SchedRouteMsg request) {
            this.GetSchedSailingsBySchedRouteAsync(request, null);
        }
        
        public void GetSchedSailingsBySchedRouteAsync(SchedRouteMsg request, object userState) {
            if ((this.GetSchedSailingsBySchedRouteOperationCompleted == null)) {
                this.GetSchedSailingsBySchedRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchedSailingsBySchedRouteCompleted);
            }
            this.InvokeAsync("GetSchedSailingsBySchedRoute", new object[] {
                        request}, this.GetSchedSailingsBySchedRouteOperationCompleted, userState);
        }
        
        private void OnGetSchedSailingsBySchedRouteCompleted(object arg) {
            if ((this.GetSchedSailingsBySchedRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchedSailingsBySchedRouteCompleted(this, new GetSchedSailingsBySchedRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves sailing times associated with a specific route for a particular date.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetScheduleByRoute", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedResponse GetScheduleByRoute(RouteMsg request) {
            object[] results = this.Invoke("GetScheduleByRoute", new object[] {
                        request});
            return ((SchedResponse)(results[0]));
        }
        
        public System.IAsyncResult BeginGetScheduleByRoute(RouteMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScheduleByRoute", new object[] {
                        request}, callback, asyncState);
        }
        
        public SchedResponse EndGetScheduleByRoute(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedResponse)(results[0]));
        }
        
        public void GetScheduleByRouteAsync(RouteMsg request) {
            this.GetScheduleByRouteAsync(request, null);
        }
        
        public void GetScheduleByRouteAsync(RouteMsg request, object userState) {
            if ((this.GetScheduleByRouteOperationCompleted == null)) {
                this.GetScheduleByRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleByRouteCompleted);
            }
            this.InvokeAsync("GetScheduleByRoute", new object[] {
                        request}, this.GetScheduleByRouteOperationCompleted, userState);
        }
        
        private void OnGetScheduleByRouteCompleted(object arg) {
            if ((this.GetScheduleByRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScheduleByRouteCompleted(this, new GetScheduleByRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves sailing times associated with a specific departing / arriving terminal combination for a particular date.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetScheduleByTerminalCombo", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedResponse GetScheduleByTerminalCombo(TerminalComboMsg request) {
            object[] results = this.Invoke("GetScheduleByTerminalCombo", new object[] {
                        request});
            return ((SchedResponse)(results[0]));
        }
        
        public System.IAsyncResult BeginGetScheduleByTerminalCombo(TerminalComboMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScheduleByTerminalCombo", new object[] {
                        request}, callback, asyncState);
        }
        
        public SchedResponse EndGetScheduleByTerminalCombo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedResponse)(results[0]));
        }
        
        public void GetScheduleByTerminalComboAsync(TerminalComboMsg request) {
            this.GetScheduleByTerminalComboAsync(request, null);
        }
        
        public void GetScheduleByTerminalComboAsync(TerminalComboMsg request, object userState) {
            if ((this.GetScheduleByTerminalComboOperationCompleted == null)) {
                this.GetScheduleByTerminalComboOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleByTerminalComboCompleted);
            }
            this.InvokeAsync("GetScheduleByTerminalCombo", new object[] {
                        request}, this.GetScheduleByTerminalComboOperationCompleted, userState);
        }
        
        private void OnGetScheduleByTerminalComboCompleted(object arg) {
            if ((this.GetScheduleByTerminalComboCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScheduleByTerminalComboCompleted(this, new GetScheduleByTerminalComboCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Provides all available terminals that correspond to a given terminal for a particular date.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetTerminalMates", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public TerminalResponse[] GetTerminalMates(TerminalMsg request) {
            object[] results = this.Invoke("GetTerminalMates", new object[] {
                        request});
            return ((TerminalResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetTerminalMates(TerminalMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTerminalMates", new object[] {
                        request}, callback, asyncState);
        }
        
        public TerminalResponse[] EndGetTerminalMates(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TerminalResponse[])(results[0]));
        }
        
        public void GetTerminalMatesAsync(TerminalMsg request) {
            this.GetTerminalMatesAsync(request, null);
        }
        
        public void GetTerminalMatesAsync(TerminalMsg request, object userState) {
            if ((this.GetTerminalMatesOperationCompleted == null)) {
                this.GetTerminalMatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTerminalMatesCompleted);
            }
            this.InvokeAsync("GetTerminalMates", new object[] {
                        request}, this.GetTerminalMatesOperationCompleted, userState);
        }
        
        private void OnGetTerminalMatesCompleted(object arg) {
            if ((this.GetTerminalMatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTerminalMatesCompleted(this, new GetTerminalMatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Provides a list of individual time adjustments (additions or cancellations) for a particular route.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetTimeAdjByRoute", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedTimeAdjResponse[] GetTimeAdjByRoute(RouteBriefMsg request) {
            object[] results = this.Invoke("GetTimeAdjByRoute", new object[] {
                        request});
            return ((SchedTimeAdjResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetTimeAdjByRoute(RouteBriefMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTimeAdjByRoute", new object[] {
                        request}, callback, asyncState);
        }
        
        public SchedTimeAdjResponse[] EndGetTimeAdjByRoute(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedTimeAdjResponse[])(results[0]));
        }
        
        public void GetTimeAdjByRouteAsync(RouteBriefMsg request) {
            this.GetTimeAdjByRouteAsync(request, null);
        }
        
        public void GetTimeAdjByRouteAsync(RouteBriefMsg request, object userState) {
            if ((this.GetTimeAdjByRouteOperationCompleted == null)) {
                this.GetTimeAdjByRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeAdjByRouteCompleted);
            }
            this.InvokeAsync("GetTimeAdjByRoute", new object[] {
                        request}, this.GetTimeAdjByRouteOperationCompleted, userState);
        }
        
        private void OnGetTimeAdjByRouteCompleted(object arg) {
            if ((this.GetTimeAdjByRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeAdjByRouteCompleted(this, new GetTimeAdjByRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Provides a list of individual time adjustments (additions or cancellations) for a particular scheduled route.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetTimeAdjBySchedRoute", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedTimeAdjResponse[] GetTimeAdjBySchedRoute(SchedRouteMsg request) {
            object[] results = this.Invoke("GetTimeAdjBySchedRoute", new object[] {
                        request});
            return ((SchedTimeAdjResponse[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetTimeAdjBySchedRoute(SchedRouteMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTimeAdjBySchedRoute", new object[] {
                        request}, callback, asyncState);
        }
        
        public SchedTimeAdjResponse[] EndGetTimeAdjBySchedRoute(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedTimeAdjResponse[])(results[0]));
        }
        
        public void GetTimeAdjBySchedRouteAsync(SchedRouteMsg request) {
            this.GetTimeAdjBySchedRouteAsync(request, null);
        }
        
        public void GetTimeAdjBySchedRouteAsync(SchedRouteMsg request, object userState) {
            if ((this.GetTimeAdjBySchedRouteOperationCompleted == null)) {
                this.GetTimeAdjBySchedRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeAdjBySchedRouteCompleted);
            }
            this.InvokeAsync("GetTimeAdjBySchedRoute", new object[] {
                        request}, this.GetTimeAdjBySchedRouteOperationCompleted, userState);
        }
        
        private void OnGetTimeAdjBySchedRouteCompleted(object arg) {
            if ((this.GetTimeAdjBySchedRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeAdjBySchedRouteCompleted(this, new GetTimeAdjBySchedRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves sailing times associated with a specific route for the current date.  User may specify if only the times for the remainder of this sailing date are required.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetTodaysScheduleByRoute", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedResponse GetTodaysScheduleByRoute(RouteTodayMsg request) {
            object[] results = this.Invoke("GetTodaysScheduleByRoute", new object[] {
                        request});
            return ((SchedResponse)(results[0]));
        }
        
        public System.IAsyncResult BeginGetTodaysScheduleByRoute(RouteTodayMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTodaysScheduleByRoute", new object[] {
                        request}, callback, asyncState);
        }
        
        public SchedResponse EndGetTodaysScheduleByRoute(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedResponse)(results[0]));
        }
        
        public void GetTodaysScheduleByRouteAsync(RouteTodayMsg request) {
            this.GetTodaysScheduleByRouteAsync(request, null);
        }
        
        public void GetTodaysScheduleByRouteAsync(RouteTodayMsg request, object userState) {
            if ((this.GetTodaysScheduleByRouteOperationCompleted == null)) {
                this.GetTodaysScheduleByRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTodaysScheduleByRouteCompleted);
            }
            this.InvokeAsync("GetTodaysScheduleByRoute", new object[] {
                        request}, this.GetTodaysScheduleByRouteOperationCompleted, userState);
        }
        
        private void OnGetTodaysScheduleByRouteCompleted(object arg) {
            if ((this.GetTodaysScheduleByRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTodaysScheduleByRouteCompleted(this, new GetTodaysScheduleByRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieves sailing times associated with a specific departing / arriving terminal combination for the current date.  User may specify if only the times for the remainder of this sailing date are required.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetTodaysScheduleByTerminalCombo", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public SchedResponse GetTodaysScheduleByTerminalCombo(TerminalComboTodayMsg request) {
            object[] results = this.Invoke("GetTodaysScheduleByTerminalCombo", new object[] {
                        request});
            return ((SchedResponse)(results[0]));
        }
        
        public System.IAsyncResult BeginGetTodaysScheduleByTerminalCombo(TerminalComboTodayMsg request, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTodaysScheduleByTerminalCombo", new object[] {
                        request}, callback, asyncState);
        }
        
        public SchedResponse EndGetTodaysScheduleByTerminalCombo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SchedResponse)(results[0]));
        }
        
        public void GetTodaysScheduleByTerminalComboAsync(TerminalComboTodayMsg request) {
            this.GetTodaysScheduleByTerminalComboAsync(request, null);
        }
        
        public void GetTodaysScheduleByTerminalComboAsync(TerminalComboTodayMsg request, object userState) {
            if ((this.GetTodaysScheduleByTerminalComboOperationCompleted == null)) {
                this.GetTodaysScheduleByTerminalComboOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTodaysScheduleByTerminalComboCompleted);
            }
            this.InvokeAsync("GetTodaysScheduleByTerminalCombo", new object[] {
                        request}, this.GetTodaysScheduleByTerminalComboOperationCompleted, userState);
        }
        
        private void OnGetTodaysScheduleByTerminalComboCompleted(object arg) {
            if ((this.GetTodaysScheduleByTerminalComboCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTodaysScheduleByTerminalComboCompleted(this, new GetTodaysScheduleByTerminalComboCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Reveals a valid date range for retrieving schedule data.  This begins with today's date and extends to the end of the most recently posted schedule.
///</remarks>
        [System.Web.Services.Protocols.SoapHeaderAttribute("APIAccessHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.wsdot.wa.gov/ferries/schedule/GetValidDateRange", RequestNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ResponseNamespace="http://www.wsdot.wa.gov/ferries/schedule/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ValidDateRangeResponse GetValidDateRange() {
            object[] results = this.Invoke("GetValidDateRange", new object[0]);
            return ((ValidDateRangeResponse)(results[0]));
        }
        
        public System.IAsyncResult BeginGetValidDateRange(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetValidDateRange", new object[0], callback, asyncState);
        }
        
        public ValidDateRangeResponse EndGetValidDateRange(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ValidDateRangeResponse)(results[0]));
        }
        
        public void GetValidDateRangeAsync() {
            this.GetValidDateRangeAsync(null);
        }
        
        public void GetValidDateRangeAsync(object userState) {
            if ((this.GetValidDateRangeOperationCompleted == null)) {
                this.GetValidDateRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetValidDateRangeCompleted);
            }
            this.InvokeAsync("GetValidDateRange", new object[0], this.GetValidDateRangeOperationCompleted, userState);
        }
        
        private void OnGetValidDateRangeCompleted(object arg) {
            if ((this.GetValidDateRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetValidDateRangeCompleted(this, new GetValidDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedBriefResponse {
        
        /// <remarks/>
        public int ScheduleID;
        
        /// <remarks/>
        public string ScheduleName;
        
        /// <remarks/>
        public Season ScheduleSeason;
        
        /// <remarks/>
        public string SchedulePDFUrl;
        
        /// <remarks/>
        public System.DateTime ScheduleStart;
        
        /// <remarks/>
        public System.DateTime ScheduleEnd;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public enum Season {
        
        /// <remarks/>
        Spring,
        
        /// <remarks/>
        Summer,
        
        /// <remarks/>
        Fall,
        
        /// <remarks/>
        Winter,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/", IsNullable=true)]
    public partial class APIAccessHeader : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        public string APIAccessCode;
        
        /// <remarks/>
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttribute()]
        public System.Xml.XmlAttribute[] AnyAttribute;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class AlertResponse {
        
        /// <remarks/>
        public int BulletinID;
        
        /// <remarks/>
        public bool BulletinFlag;
        
        /// <remarks/>
        public string BulletinText;
        
        /// <remarks/>
        public bool CommunicationFlag;
        
        /// <remarks/>
        public string CommunicationText;
        
        /// <remarks/>
        public bool RouteAlertFlag;
        
        /// <remarks/>
        public string RouteAlertText;
        
        /// <remarks/>
        public string HomepageAlertText;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> PublishDate;
        
        /// <remarks/>
        public string DisruptionDescription;
        
        /// <remarks/>
        public bool AllRoutesFlag;
        
        /// <remarks/>
        public int SortSeq;
        
        /// <remarks/>
        public int AlertTypeID;
        
        /// <remarks/>
        public string AlertType;
        
        /// <remarks/>
        public string AlertFullTitle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem(IsNullable=false)]
        public int[] AffectedRouteIDs;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class TripDateMsg {
        
        /// <remarks/>
        public System.DateTime TripDate;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class RouteResponse {
        
        /// <remarks/>
        public int RouteID;
        
        /// <remarks/>
        public string RouteAbbrev;
        
        /// <remarks/>
        public string Description;
        
        /// <remarks/>
        public int RegionID;
        
        /// <remarks/>
        public int VesselWatchID;
        
        /// <remarks/>
        public bool ReservationFlag;
        
        /// <remarks/>
        public bool InternationalFlag;
        
        /// <remarks/>
        public bool PassengerOnlyFlag;
        
        /// <remarks/>
        public string CrossingTime;
        
        /// <remarks/>
        public string AdaNotes;
        
        /// <remarks/>
        public string GeneralRouteNotes;
        
        /// <remarks/>
        public string SeasonalRouteNotes;
        
        /// <remarks/>
        public RouteAlert[] Alerts;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class RouteAlert {
        
        /// <remarks/>
        public int BulletinID;
        
        /// <remarks/>
        public bool BulletinFlag;
        
        /// <remarks/>
        public bool CommunicationFlag;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> PublishDate;
        
        /// <remarks/>
        public string AlertDescription;
        
        /// <remarks/>
        public string DisruptionDescription;
        
        /// <remarks/>
        public string AlertFullTitle;
        
        /// <remarks/>
        public string AlertFullText;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class RouteBriefResponse {
        
        /// <remarks/>
        public int RouteID;
        
        /// <remarks/>
        public string RouteAbbrev;
        
        /// <remarks/>
        public string Description;
        
        /// <remarks/>
        public int RegionID;
        
        /// <remarks/>
        public RouteBriefAlert[] ServiceDisruptions;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class RouteBriefAlert {
        
        /// <remarks/>
        public int BulletinID;
        
        /// <remarks/>
        public bool BulletinFlag;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> PublishDate;
        
        /// <remarks/>
        public string DisruptionDescription;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedRouteBriefResponse {
        
        /// <remarks/>
        public int ScheduleID;
        
        /// <remarks/>
        public int SchedRouteID;
        
        /// <remarks/>
        public bool ContingencyOnly;
        
        /// <remarks/>
        public int RouteID;
        
        /// <remarks/>
        public string RouteAbbrev;
        
        /// <remarks/>
        public string Description;
        
        /// <remarks/>
        public string SeasonalRouteNotes;
        
        /// <remarks/>
        public int RegionID;
        
        /// <remarks/>
        public RouteBriefAlert[] ServiceDisruptions;
        
        /// <remarks/>
        public SchedRouteAdj[] ContingencyAdj;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedRouteAdj {
        
        /// <remarks/>
        public System.DateTime DateFrom;
        
        /// <remarks/>
        public System.DateTime DateThru;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> EventID;
        
        /// <remarks/>
        public string EventDescription;
        
        /// <remarks/>
        public AdjustmentType AdjType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> ReplacedBySchedRouteID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public enum AdjustmentType {
        
        /// <remarks/>
        Addition,
        
        /// <remarks/>
        Cancellation,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class TerminalResponse {
        
        /// <remarks/>
        public int TerminalID;
        
        /// <remarks/>
        public string Description;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class TerminalComboResponse {
        
        /// <remarks/>
        public int DepartingTerminalID;
        
        /// <remarks/>
        public string DepartingDescription;
        
        /// <remarks/>
        public int ArrivingTerminalID;
        
        /// <remarks/>
        public string ArrivingDescription;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedTimeAdjResponse {
        
        /// <remarks/>
        public int ScheduleID;
        
        /// <remarks/>
        public int SchedRouteID;
        
        /// <remarks/>
        public int RouteID;
        
        /// <remarks/>
        public string RouteDescription;
        
        /// <remarks/>
        public int RouteSortSeq;
        
        /// <remarks/>
        public int SailingID;
        
        /// <remarks/>
        public string SailingDescription;
        
        /// <remarks/>
        public SchedSailingDateRange ActiveSailingDateRange;
        
        /// <remarks/>
        public Direction SailingDir;
        
        /// <remarks/>
        public int JourneyID;
        
        /// <remarks/>
        public int VesselID;
        
        /// <remarks/>
        public string VesselName;
        
        /// <remarks/>
        public bool VesselHandicapAccessible;
        
        /// <remarks/>
        public int VesselPositionNum;
        
        /// <remarks/>
        public int JourneyTerminalID;
        
        /// <remarks/>
        public int TerminalID;
        
        /// <remarks/>
        public string TerminalDescription;
        
        /// <remarks/>
        public string TerminalBriefDescription;
        
        /// <remarks/>
        public System.DateTime TimeToAdj;
        
        /// <remarks/>
        public System.DateTime AdjDateFrom;
        
        /// <remarks/>
        public System.DateTime AdjDateThru;
        
        /// <remarks/>
        public bool TidalAdj;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> EventID;
        
        /// <remarks/>
        public string EventDescription;
        
        /// <remarks/>
        public TimeType DepArrIndicator;
        
        /// <remarks/>
        public AdjustmentType AdjType;
        
        /// <remarks/>
        public SchedAnnotation[] Annotations;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedSailingDateRange {
        
        /// <remarks/>
        public System.DateTime DateFrom;
        
        /// <remarks/>
        public System.DateTime DateThru;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> EventID;
        
        /// <remarks/>
        public string EventDescription;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public enum Direction {
        
        /// <remarks/>
        Westbound,
        
        /// <remarks/>
        Eastbound,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public enum TimeType {
        
        /// <remarks/>
        Departure,
        
        /// <remarks/>
        Arrival,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedAnnotation {
        
        /// <remarks/>
        public int AnnotationID;
        
        /// <remarks/>
        public string AnnotationText;
        
        /// <remarks/>
        public string AnnotationIVRText;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> AdjustedCrossingTime;
        
        /// <remarks/>
        public string AnnotationImg;
        
        /// <remarks/>
        public string TypeDescription;
        
        /// <remarks/>
        public int SortSeq;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class RouteMsg {
        
        /// <remarks/>
        public System.DateTime TripDate;
        
        /// <remarks/>
        public int RouteID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class TerminalComboMsg {
        
        /// <remarks/>
        public System.DateTime TripDate;
        
        /// <remarks/>
        public int DepartingTerminalID;
        
        /// <remarks/>
        public int ArrivingTerminalID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedMsg {
        
        /// <remarks/>
        public int ScheduleID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedRouteMsg {
        
        /// <remarks/>
        public int SchedRouteID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedSailingResponse {
        
        /// <remarks/>
        public int ScheduleID;
        
        /// <remarks/>
        public int SchedRouteID;
        
        /// <remarks/>
        public int RouteID;
        
        /// <remarks/>
        public int SailingID;
        
        /// <remarks/>
        public string SailingDescription;
        
        /// <remarks/>
        public string SailingNotes;
        
        /// <remarks/>
        public int DisplayColNum;
        
        /// <remarks/>
        public Direction SailingDir;
        
        /// <remarks/>
        public string DayOpDescription;
        
        /// <remarks/>
        public bool DayOpUseForHoliday;
        
        /// <remarks/>
        public SchedSailingDateRange[] ActiveDateRanges;
        
        /// <remarks/>
        public SchedJourn[] Journs;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedJourn {
        
        /// <remarks/>
        public int JourneyID;
        
        /// <remarks/>
        public bool ReservationInd;
        
        /// <remarks/>
        public bool InternationalInd;
        
        /// <remarks/>
        public bool InterislandInd;
        
        /// <remarks/>
        public int VesselID;
        
        /// <remarks/>
        public string VesselName;
        
        /// <remarks/>
        public bool VesselHandicapAccessible;
        
        /// <remarks/>
        public int VesselPositionNum;
        
        /// <remarks/>
        public SchedTimeTerminal[] TerminalTimes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedTimeTerminal {
        
        /// <remarks/>
        public int JourneyTerminalID;
        
        /// <remarks/>
        public int TerminalID;
        
        /// <remarks/>
        public string TerminalDescription;
        
        /// <remarks/>
        public string TerminalBriefDescription;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> Time;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<TimeType> DepArrIndicator;
        
        /// <remarks/>
        public bool IsNA;
        
        /// <remarks/>
        public SchedAnnotation[] Annotations;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedResponse {
        
        /// <remarks/>
        public int ScheduleID;
        
        /// <remarks/>
        public string ScheduleName;
        
        /// <remarks/>
        public Season ScheduleSeason;
        
        /// <remarks/>
        public string SchedulePDFUrl;
        
        /// <remarks/>
        public System.DateTime ScheduleStart;
        
        /// <remarks/>
        public System.DateTime ScheduleEnd;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem(IsNullable=false)]
        public int[] AllRoutes;
        
        /// <remarks/>
        public SchedTerminalCombo[] TerminalCombos;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedTerminalCombo {
        
        /// <remarks/>
        public int DepartingTerminalID;
        
        /// <remarks/>
        public string DepartingTerminalName;
        
        /// <remarks/>
        public int ArrivingTerminalID;
        
        /// <remarks/>
        public string ArrivingTerminalName;
        
        /// <remarks/>
        public string SailingNotes;
        
        /// <remarks/>
        public string[] Annotations;
        
        /// <remarks/>
        public SchedTime[] Times;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class SchedTime {
        
        /// <remarks/>
        public System.DateTime DepartingTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> ArrivingTime;
        
        /// <remarks/>
        public LoadIndicator LoadingRule;
        
        /// <remarks/>
        public int VesselID;
        
        /// <remarks/>
        public string VesselName;
        
        /// <remarks/>
        public bool VesselHandicapAccessible;
        
        /// <remarks/>
        public int VesselPositionNum;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem(IsNullable=false)]
        public int[] Routes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem(IsNullable=false)]
        public int[] AnnotationIndexes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public enum LoadIndicator {
        
        /// <remarks/>
        Passenger,
        
        /// <remarks/>
        Vehicle,
        
        /// <remarks/>
        Both,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class TerminalMsg {
        
        /// <remarks/>
        public System.DateTime TripDate;
        
        /// <remarks/>
        public int TerminalID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class RouteBriefMsg {
        
        /// <remarks/>
        public int RouteID;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class RouteTodayMsg {
        
        /// <remarks/>
        public int RouteID;
        
        /// <remarks/>
        public bool OnlyRemainingTimes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class TerminalComboTodayMsg {
        
        /// <remarks/>
        public int DepartingTerminalID;
        
        /// <remarks/>
        public int ArrivingTerminalID;
        
        /// <remarks/>
        public bool OnlyRemainingTimes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.wsdot.wa.gov/ferries/schedule/")]
    public partial class ValidDateRangeResponse {
        
        /// <remarks/>
        public System.DateTime DateFrom;
        
        /// <remarks/>
        public System.DateTime DateThru;
    }
    
    public partial class GetActiveScheduledSeasonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveScheduledSeasonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedBriefResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedBriefResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetActiveScheduledSeasonsCompletedEventHandler(object sender, GetActiveScheduledSeasonsCompletedEventArgs args);
    
    public partial class GetAllAlertsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAlertsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AlertResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AlertResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetAllAlertsCompletedEventHandler(object sender, GetAllAlertsCompletedEventArgs args);
    
    public partial class GetAllRouteDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRouteDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RouteResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RouteResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetAllRouteDetailsCompletedEventHandler(object sender, GetAllRouteDetailsCompletedEventArgs args);
    
    public partial class GetAllRoutesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRoutesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RouteBriefResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RouteBriefResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetAllRoutesCompletedEventHandler(object sender, GetAllRoutesCompletedEventArgs args);
    
    public partial class GetAllRoutesHavingServiceDisruptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRoutesHavingServiceDisruptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RouteBriefResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RouteBriefResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetAllRoutesHavingServiceDisruptionsCompletedEventHandler(object sender, GetAllRoutesHavingServiceDisruptionsCompletedEventArgs args);
    
    public partial class GetAllSchedRoutesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSchedRoutesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedRouteBriefResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedRouteBriefResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetAllSchedRoutesCompletedEventHandler(object sender, GetAllSchedRoutesCompletedEventArgs args);
    
    public partial class GetAllTerminalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTerminalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TerminalResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TerminalResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetAllTerminalsCompletedEventHandler(object sender, GetAllTerminalsCompletedEventArgs args);
    
    public partial class GetAllTerminalsAndMatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTerminalsAndMatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TerminalComboResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TerminalComboResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetAllTerminalsAndMatesCompletedEventHandler(object sender, GetAllTerminalsAndMatesCompletedEventArgs args);
    
    public partial class GetAllTimeAdjCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTimeAdjCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedTimeAdjResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedTimeAdjResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetAllTimeAdjCompletedEventHandler(object sender, GetAllTimeAdjCompletedEventArgs args);
    
    public partial class GetCacheFlushDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCacheFlushDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Nullable<System.DateTime> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<System.DateTime>)(this.results[0]));
            }
        }
    }
    
    public delegate void GetCacheFlushDateCompletedEventHandler(object sender, GetCacheFlushDateCompletedEventArgs args);
    
    public partial class GetRouteDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRouteDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RouteResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RouteResponse)(this.results[0]));
            }
        }
    }
    
    public delegate void GetRouteDetailCompletedEventHandler(object sender, GetRouteDetailCompletedEventArgs args);
    
    public partial class GetRouteDetailsByTerminalComboCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRouteDetailsByTerminalComboCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RouteResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RouteResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetRouteDetailsByTerminalComboCompletedEventHandler(object sender, GetRouteDetailsByTerminalComboCompletedEventArgs args);
    
    public partial class GetRoutesByTerminalComboCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoutesByTerminalComboCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RouteBriefResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RouteBriefResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetRoutesByTerminalComboCompletedEventHandler(object sender, GetRoutesByTerminalComboCompletedEventArgs args);
    
    public partial class GetSchedRoutesByScheduledSeasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchedRoutesByScheduledSeasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedRouteBriefResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedRouteBriefResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetSchedRoutesByScheduledSeasonCompletedEventHandler(object sender, GetSchedRoutesByScheduledSeasonCompletedEventArgs args);
    
    public partial class GetSchedSailingsBySchedRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchedSailingsBySchedRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedSailingResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedSailingResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetSchedSailingsBySchedRouteCompletedEventHandler(object sender, GetSchedSailingsBySchedRouteCompletedEventArgs args);
    
    public partial class GetScheduleByRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScheduleByRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedResponse)(this.results[0]));
            }
        }
    }
    
    public delegate void GetScheduleByRouteCompletedEventHandler(object sender, GetScheduleByRouteCompletedEventArgs args);
    
    public partial class GetScheduleByTerminalComboCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScheduleByTerminalComboCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedResponse)(this.results[0]));
            }
        }
    }
    
    public delegate void GetScheduleByTerminalComboCompletedEventHandler(object sender, GetScheduleByTerminalComboCompletedEventArgs args);
    
    public partial class GetTerminalMatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTerminalMatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TerminalResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TerminalResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetTerminalMatesCompletedEventHandler(object sender, GetTerminalMatesCompletedEventArgs args);
    
    public partial class GetTimeAdjByRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeAdjByRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedTimeAdjResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedTimeAdjResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetTimeAdjByRouteCompletedEventHandler(object sender, GetTimeAdjByRouteCompletedEventArgs args);
    
    public partial class GetTimeAdjBySchedRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeAdjBySchedRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedTimeAdjResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedTimeAdjResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetTimeAdjBySchedRouteCompletedEventHandler(object sender, GetTimeAdjBySchedRouteCompletedEventArgs args);
    
    public partial class GetTodaysScheduleByRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTodaysScheduleByRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedResponse)(this.results[0]));
            }
        }
    }
    
    public delegate void GetTodaysScheduleByRouteCompletedEventHandler(object sender, GetTodaysScheduleByRouteCompletedEventArgs args);
    
    public partial class GetTodaysScheduleByTerminalComboCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTodaysScheduleByTerminalComboCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SchedResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SchedResponse)(this.results[0]));
            }
        }
    }
    
    public delegate void GetTodaysScheduleByTerminalComboCompletedEventHandler(object sender, GetTodaysScheduleByTerminalComboCompletedEventArgs args);
    
    public partial class GetValidDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetValidDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ValidDateRangeResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidDateRangeResponse)(this.results[0]));
            }
        }
    }
    
    public delegate void GetValidDateRangeCompletedEventHandler(object sender, GetValidDateRangeCompletedEventArgs args);
}
